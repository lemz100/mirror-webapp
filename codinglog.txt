23/10/2025 18:05:
-Prepared the environment by using my own custom React and Node.JS Template bundled with Webpack, Prettier and ESLint
- Fixed up LESS Modules issues by setting the option 'esModule' to false in the webpack.config.js file
    -Expected .module.less to be a ES6 file, however from setting this it now expects .module.less to be a CommonJS File.

24/10/2025 09:50:
-Setting up routing for the Homepage, Signup Page and Login Page
    -Added styling reset for <Link> to overwrite them with custom styling
    -Simple 'Welcome, Signup, Login' Page
-Setting up Login and Signup page
    -Set up the Signup component with a form and its states - formData and formErrors.
    -Setting up a helper file 'validation.js' that will hold all the form validation for the form.
-Testing error messages and form logic
    -Using unit tests for testing form logic.
    -First styling the page to make testing a bit easier.
    -Using jest to test - my first time.
        - Testing authentication signup first.
        - 4X testing cases:
            -Missing input fields
            -Invalid email format
            -Weak password (not enough characters)
            -Password missing uppercase
    -Styled the login page and registration page.
-Ready to plug backend in and link it to the frontend forms.
    -Going to use a dummy database to test whether it works
        -Dummy JSON file for user authentication testing
        -4x dummy user details for login testing.
    -Got the backend /signup route to work
        -Debugging & fixing minor issues such as
            -Wrong users.json path causing 500 error
                -Fixed the path in auth.js
            -Backend server not parsing json
                -Fixed with app.use(express.json());
            -Username + email being the same
                -Adding validation to prevent this.
                -(formData.username === formData.email || validateEmail(formData.username))
                    -Tests if username equals the email, or if when you validate username it returns true (valid email)
    -Got the backend /login route to work 
        -Added a feature for user to login with either their username or email
-BACKEND AUTHENTICATION MINIMUM COMPLETE.
TOMORROW::
        -Going to add password hashing/unhashing - DONE
        -Going to add password validation checklist (checks to see if password is valid with 5x rules like online forms) - DONE

25/10/2025 10:00:
-Building a tick and cross component for password validation checklist
-Making the password validation checklist  
    -I started out by creating an object with the validation label and boolean variable
        -isValid = boolean variable to see if password is valid
        -label - label for validation (e.g. - 'minimum 8 characters)
    -I then put in the tick and cross component which is based on isValid 
        -The user will see a tick if their password passes validation checks
    -I incorporated the logic into handleChange (form input state handler)
        -It tracks the password input, checks if the input is of the password input 
        -It then goes through a series of if statements that use methods from the validation helper script to validate the input
            -isMinimum(value, 8) = function that checks if the string has a minimum of 8 characters
            -hasUppercase = function that checks if string has an uppercase letter
            -hasNumbers = function that checks if the string has hasNumbers
        -If function returns true, it sets the isValid for that validation to 'true' and does the opposite if it returns false.
    -I moved it from a normal object into a state for ease of use and real-time updates.
    -I then updated the logic to be more readable and cleaner - from if-else statements to this:
            if (name === 'password') {
                const checks = {
                    minLength: isMinimum(value, 8),
                    hasUppercase: hasUppercase(value),
                    hasNumber: hasNumbers(value),
                };

                setValidations((prev) => {
                    const updated = { ...prev };
                    for (const key in checks) {
                    updated[key] = { ...updated[key], isValid: checks[key] };
                    }
                    return updated;
                });
                }
        -Loops through the checks object, and for each validation (key), it performs the function and updates the boolean variable based on the output.
        -This allows me to add more validations as I see fit, and makes the code easier to read.
-Incorporating it into the form, tests and validation logic
    -First I will fit it into the form to replace the original password input.
        -I pass the validations object into validateSignupForm() aswell as the form database
        -I then remove the original password validation inside validateSignupForm() and replace it with:
            const allValid = Object.values(validations).every(v => v.isValid);
                -Goes through the values of each validation object inside validations, checks if all of their isValid values is true.
        -I then do a ! check. If the above line doesn't return true, then password isn't fully validated.
    -Now that the form and validation logic work well, I will now adjust tests to reflect these changes.
        -I change the password assertions to the error messages that I have set in validateSignupForm
        -I add the validations object to the test script for passing in to the method.
        -Due to an issue where in UI the validation check works correctly, however in the testing the
            validation check doesn't work (returning false for every password check),
            instead of passing validations to the validateSignupForm() method, I used the checks
            object with each check and its function to validate the passwords so the function doesn't rely on state.
            -This fixed the issue. Now validateSignupForm() does not need to rely on state.
-Password validation checklist has been fully incorporated into the form and tests
-Refactoring and cleaning up validateSignupForm so its easier to read & implement
    -Added a helper function - checkEmpty
        -checks if a field is empty or only has whitespace to avoid edge case where user can enter "   " and it will be valid.
-Tested everything with a dummy user 
    -Worked successfully
    -Also ran tests to see if it worked - yes.
-Currently testing to see if signup still works when emails are alrdy used
    -Works for both email and username.
-Added extra functionality in the try ... catch block
    Added an if statement - if res.status = 201 (success) then form and validation resets.
    Added an errors object for email and username being taken, with the field and error message property
        -If the form is submitted and the email / username is taken, it will:
            -check which is taken based on the responseMsg
            -use the errors object to 1) empty the field and 2) add an error message to the field
    -Will add/adjust functionality to handle edge case where user enters both fields and they are taken
        -Re-adjusted backend logic to use an empty object that only gets filled when there are taken fields.
        -If the object isn't empty, it returns an error. If it is, it continues.
        -Takes the error from backend and handles the relative fields and error messages accordingly using if statements.
-Adding a toaster to replace the message at the bottom
    -Ran into an issue where the inputs don't clear when the username/email is taken
    -Applied batching - reduced state setting and replaced most of them with objects.
        -Batching solved the issue - using new objects over setting states with prev reduces the amount of states being set in one render
        -States are set only once, rather than multiple times per render
-Adding password hash / unhashing
    -Will be using bcrypt library as I am more familiar with it and it is a good method of hashing passwords.
    -Saltrounds = 10. Optimal number for salting.
    -bcrypt.hash(password, salting) for hashing passwords 
    -bcrypt.compare(password, user.password) for comparing hashed password(user.password) with user input
    -Tested hashing function with a registered dummy account - it worked.
-BACKEND AUTHENTICATION COMPLETE
    -Adding clearer error messages in the backend - sorted
    -Added secondary empty field checks in the backend to prevent bad actors.
    -Added a loading spinner to the button for loading inbetween async requests.
    -Adding a toaster for login page - sorted
NEXT:
    -Connect a PostgreSQL database with the backend and input 5x dummy accounts to use.
    -